#!/bin/sh
set -m

#==================================================================================================
#title           :minimon-server
#description     :Server for minimon
#author          :Wesley van Tilburg
#date            :13/09/2022
#version         :0.05
#==================================================================================================

trap 'clean' EXIT SIGINT SIGTERM

clean(){
	if $STARTED; then
		echo "cleaning"
		kill -- -$(jobs -p)
		rm -rf /tmp/mini*
		exit 0
	fi
}

usage(){
	echo "MiniMon; made by Misthios
-p : port for the server (defaults to 12345)
-c : path for the certificate
-v : verify the certificate (defaults to 0 = false)
-t : folder which contains the tasks shell scripts (defaults to ./Tasks/)
";}

setup(){
	mkdir -p /tmp/minimon/hosts/
	if ! [ -e /tmp/minimon/control ]; then
		mkfifo /tmp/minimon/control
	fi
	if ! [ -e /tmp/minimon/minimon-in ]; then
		mkfifo /tmp/minimon/minimon-in
	fi
}


run_server(){
	 socat -u openssl-listen:"$PORT",fork,reuseaddr,cert="$CERT",verify="$VERIFY" PIPE:/tmp/minimon/minimon-in
}
sort(){
	while :
	 do
		 read msg < /tmp/minimon/minimon-in
		 name="$(echo "$msg" | jq -r '.host')"
		 pipe="/tmp/minimon/hosts/$name"
		 if ! [ -e "$pipe" ]; then
			 mkfifo $pipe
			 echo "$name" >> /tmp/minimon/control #Notify control about the new host
			 
		 fi
		 echo "$msg" >> $pipe
		done
}

#Read the hosts metrics
listen(){
	while :
	do
		read msg < /tmp/minimon/hosts/$1
		echo $msg
	done
}

#start a background job to read the hosts metrics
listen_control(){
	while :
	do
		read name < /tmp/minimon/control
		listen $name&
	done
}

##--------- ARGUMENTS ----------#
while getopts ':p:t:c:v:h' OPTION; do
	case "$OPTION" in
		p) PORT="$OPTARG";;
		c) CERT="$OPTARG";;
		t) TASKDIR="$OPTARG";;
		v) VERIFY="$OPTARG";;
		h) usage; exit 0;;
	esac
done

#default values
: ${PORT:="12345"}
: ${TASKDIR:="./Tasks/"}
: ${VERIFY:=0} #off by default for now
STARTED=false


#Make sure that cert is a valid pem file
if [ -z "$CERT" ]; then echo "A cert path must be given"; exit 1; fi;
if ! [ -f "$CERT" ]; then echo "cert not found"; exit 1; fi;
if ! openssl x509 --noout -in "$CERT"; then echo "cert is not a valid pem"; exit 1; fi;

#Make sure that verify is a number
re='^[0-9]+$'
if ! [[ $VERIFY =~ $re ]] ; then echo "Verify must be a number" ; exit 1; fi
if ! [ "$VERIFY" -ge 0 ] && ["$VERIFY" -le 1 ]; then echo "verify must either be 0 or 1"; exit 1; fi;

setup
run_server&
sort&
listen_control&
STARTED=true #for the cleanup trap

#todo: replace with shell
while :
do
	sleep 1
done


