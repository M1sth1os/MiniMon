#!/bin/sh
set -m

#==================================================================================================
#title           :minimon-server
#description     :Server for minimon
#author          :Wesley van Tilburg
#date            :13/09/2022
#version         :0.05
#==================================================================================================

trap 'clean' EXIT SIGINT SIGTERM

clean(){
	if $STARTED; then
		kill -- -$(jobs -p)
		rm -rf /tmp/mini*
		exit 0
	fi
}

#Log functions
log(){ printf '\e[0;%sm[\e[0m%s\e[0;%sm]\e[0m %s\n' "${3:-35}" "$(date)" "${3:-35}" "$1"; }
warn(){ log "$1" "${2:-warning}" 33; }
err(){ log "$1" "${2:-error}" 31; exit 1; }

usage(){
	echo "MiniMon; made by Misthios
-a : folder which contains the alarms shell scripts (defaults to ./Alarms/)
-p : port for the server (defaults to 12345)
-c : path for the certificate
-v : verify the certificate (defaults to 0 = false)
-t : folder which contains the tasks shell scripts (defaults to ./Tasks/)
-m : folder which contains the monitor shell scripts (defaults to ./Monitors/)
-i : folder which contains the integration shell scripts (defaults to ./Integrations/)";}

setup(){
  log "starting minimon..."
	mkdir -p /tmp/minimon/hosts/
	mkdir -p /tmp/minimon/monitors/
	if ! [ -e /tmp/minimon/control ]; then mkfifo /tmp/minimon/control; fi
	TASKS="$(find "$TASKDIR" -type f -maxdepth 1)"
	MONITORS="$(find "$MONITORDIR" -type f -maxdepth 1)"
}


run_server(){
	 socat -u openssl-listen:"$PORT",fork,reuseaddr,cert="$CERT",verify="$VERIFY" \
	 'system:
			read MESSAGE
			name=$(echo $MESSAGE | jq -r ".host")
			echo connect $name $SOCAT_PEERADDR >> /tmp/minimon/control

	 	while read MESSAGE
		do
			echo $MESSAGE >> /tmp/minimon/hosts/$name
		done
		echo disconnect $name >> /tmp/minimon/control
		'
	
}

#Run monitor tasks 
run_monitors(){
  while :
  do
    hosts="$(cat /tmp/minimon/hosts.tmp 2>/dev/null)"
    for host in $hosts
    do
      name="$(echo "$host" | cut -d: -f1)"
      ip="$(echo "$host" | cut -d: -f2)"
      for monitor in $MONITORS
      do
        . $monitor
        run
      done
    done
      sleep 10 #todo make configurable
  done

}

#Trigger alarms
#$1 is the host that triggered it
#$2 is the msg
trigger_alarms(){
  for alarm in $ALARMS 
  do
    echo "found $alarm"
    . $alarm
    trigger $1 $2
  done

}

#Parse and read the hosts metrics
listen(){

  if [ -d "$TASKDIR$1" ]; then hosttasks="$(find "$TASKDIR$1" -type f -maxdepth 1)"; TASKS="$TASKS $hosttasks"; fi
	HOST=$1
	while read msg < /tmp/minimon/hosts/$1
	do
		for task in $TASKS
		do
			TNAME="$(echo $task | rev | cut -d/ -f1 | rev)"
			. $task
			run
		done
	done
}

#start a background job to read the hosts metrics
listen_control(){
	while :
	do
		read msg < /tmp/minimon/control
		name="$(echo $msg | cut -d' ' -f2)"
		case "$msg" in
			connect*) 
				  pipe="/tmp/minimon/hosts/$name"
				  ip="$(echo $msg | cut -d' ' -f3)"
				  if ! [ -e "$pipe" ]; then 
					  log "New host: $name"
					  mkfifo /tmp/minimon/hosts/"$name"
					  listen $name&
				  else 
					  log "$name reconnected"
				  fi
				  hosts="$hosts $name:$ip"
          echo $hosts > /tmp/minimon/hosts.tmp
				  ;;
			disconnect*) 
				  log "$name disconnected"
				  old="$(echo $hosts | grep -o "$name.[0-9].*")"
				  hosts="$(echo $hosts | sed "s/$old//g")"
          echo $hosts > /tmp/minimon/hosts.tmp
			        ;;
		 esac
	done
}

##--------- ARGUMENTS ----------#
while getopts ':p:t:c:v:m:i:h' OPTION; do
	case "$OPTION" in
		a) ALARMDIR="$OPTARG";;
		p) PORT="$OPTARG";;
		c) CERT="$OPTARG";;
		t) TASKDIR="$OPTARG";;
		m) MONITORDIR="$OPTARG";;
		v) VERIFY="$OPTARG";;
		i) INTEGRATIONDIR="$OPTARG";;
		h) usage; exit 0;;
	esac
done

#default values
: ${ALARMDIR:="./Alarms/"}
: ${PORT:="12345"}
: ${TASKDIR:="./Tasks/"}
: ${MONITORDIR:="./Monitors/"}
: ${INTEGRATIONDIR:="./Integrations/"}
: ${VERIFY:=0} #off by default for now
STARTED=false


#Make sure that cert is a valid pem file
if [ -z "$CERT" ]; then err "A cert path must be given";  fi;
if ! [ -f "$CERT" ]; then err "cert not found";  fi;
if ! openssl x509 --noout -in "$CERT" 2>/dev/null; then err "cert is not a valid pem";  fi;

#Make sure that verify is a number
re='^[0-9]+$'
if ! [[ $VERIFY =~ $re ]] ; then err "Verify must be a number" ;  fi
if ! [ "$VERIFY" -ge 0 ] && ["$VERIFY" -le 1 ]; then err "verify must either be 0 or 1";  fi;

#Verify all the folders
if ! [ -d "$TASKDIR" ]; then err "taskdir does not exist";  fi
if ! [ -d "$MONITORDIR" ]; then err "monitordir does not exist";  fi
if  [ -d "$INTEGRATIONDIR" ]; then INTEGRATIONS="$(find "$INTEGRATIONDIR" -type f -maxdepth 1)"; fi
if  [ -d "$ALARMDIR" ]; then ALARMS="$(find "$ALARMDIR" -type f -maxdepth 1)"; fi

setup
run_server&
run_monitors&
listen_control&
STARTED=true #for the cleanup trap

#todo: replace with shell
while :
do
	sleep 1
done


